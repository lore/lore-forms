import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import _ from 'lodash';
import { result as _result } from 'lore-utils';
import { GenericForm } from 'lore-react-forms';
import { Overlay, Request, RequestError, SuccessMessage } from 'lore-react-forms-bootstrap';

export default createReactClass({
  displayName: 'Overlay',

  propTypes: {
    title: PropTypes.node,
    description: PropTypes.node,
    successMessage: PropTypes.node
  },

  getInitialState: function() {
    const { model } = this.props;

    return {
      data: _.merge({
        confirmation: ''
      }, model.data),
      isSaving: false,
      showSuccessMessage: false,
      hasError: false,
      request: null,
    };
  },

  request: function(data) {
    const { model } = this.props;
    return lore.actions.{{ modelName }}.destroy(model).payload;
  },

  onSubmit: function () {
    const { data } = this.state;

    this.setState({
      isSaving: true,
      showSuccessMessage: false,
      hasError: false,
      request: this.request(data, this)
    });
  },

  onRequestSuccess: function (request) {
    this.setState({
      isSaving: false,
      request: request,
      showSuccessMessage: true,
      hasError: false
    });
  },

  onRequestError: function (request) {
    this.setState({
      isSaving: false,
      request: request,
      hasError: true
    });
  },

  onChange: function(name, value) {
    const nextData = _.merge({}, this.state.data);
    nextData[name] = value;
    this.setState({
      data: nextData
    });
  },

  getValidators: function(data) {
    return {
      confirmation: [(value) => {
        if (value !== 'delete') {
          return 'This field must contain the word "delete"'
        }
      }]
    };
  },

  render: function() {
    const {
      title = `Delete {{ _.capitalize(modelName) }}`,
      description = '',
      successMessage = `{{ _.capitalize(modelName) }} deleted.`,
      schema,
      fieldMap,
      actionMap,
      fields,
      actions
    } = this.props;

    const {
      data,
      request,
      isSaving,
      showSuccessMessage,
      hasError
    } = this.state;

    const validators = this.getValidators(data);

    const requestProps = {
      request: request,
      reducer: '{{ modelName }}',
      onSuccess: this.onRequestSuccess,
      onError: this.onRequestError
    };

    return (
      <Overlay isVisible={isSaving}>
        <div>
          <div className="modal-header">
            {title ? (
              <h4 className="modal-title">
                {title}
              </h4>
            ) : null}
            {description ? (
              <p className="help-block">
                {description}
              </p>
            ) : null}
            {showSuccessMessage ? (
              <SuccessMessage
                title="Success!"
                message={successMessage}
              />
            ) : null}
            {hasError ? (
              <RequestError request={request}>
                {(request) => {
                  return request.error;
                }}
              </RequestError>
            ) : null}
          </div>
          {(request && isSaving) ? (
            <Request {...requestProps} />
          ) : null}
          <GenericForm
            data={data}
            validators={validators}
            onChange={this.onChange}
            callbacks={% raw %}{{
              onSubmit: this.onSubmit
            }}{% endraw %}
          >
            {(form) => {
              return (
                <div>
                  <div className="modal-body">
                    <div className="row">
                      <div className="col-md-12">
                        <p>
                          Enter the word "delete" into the field below to confirm you want to delete this.
                        </p>
                      </div>
                    </div>
                    <div className="row">
                      <div className="col-md-12">
                        <div className="form-group">
                          <label>Confirmation</label>
                          <input
                            type="text"
                            className="form-control"
                            value={form.data.confirmation}
                            placeholder="delete"
                            onChange={(event) => {
                              form.onChange('confirmation', event.target.value)
                            }}
                          />
                          <span className="help-block">
                            Enter the word "delete"
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="modal-footer">
                    <div className="row">
                      <div className="col-md-12">
                        <button
                          type="button"
                          className="btn btn-primary"
                          disabled={form.hasError}
                          onClick={() => {
                            form.callbacks.onSubmit(form.data);
                          }}
                        >
                          Delete
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              )
            }}
          </GenericForm>
        </div>
      </Overlay>
    );
  }

});
