import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import _ from 'lodash';
import { result as _result } from 'lore-utils';
import { GenericForm } from 'lore-react-forms';
import { Overlay, Request, RequestError, SuccessMessage } from 'lore-react-forms-bootstrap';

export default createReactClass({
  displayName: 'Overlay',

  propTypes: {
    model: PropTypes.object.isRequired,
    title: PropTypes.node,
    description: PropTypes.node,
    successMessage: PropTypes.node
  },

  getInitialState: function() {
    const { model } = this.props;

    return {
      data: _.merge({
        firstName: '',
        lastName: ''
      }, model.data),
      isSaving: false,
      showSuccessMessage: false,
      hasError: false,
      request: null,
    };
  },

  request: function(data) {
    const { model } = this.props;
    return lore.actions.{{ modelName }}.update(model, data).payload;
  },

  onSubmit: function () {
    const { data } = this.state;

    this.setState({
      isSaving: true,
      showSuccessMessage: false,
      hasError: false,
      request: this.request(data, this)
    });
  },

  onCancel: function(data) {
    this.props.onCancel(data);
  },

  onRequestSuccess: function (request) {
    this.setState({
      isSaving: false,
      request: request,
      showSuccessMessage: true,
      hasError: false
    });
    this.onCancel();
  },

  onRequestError: function (request) {
    this.setState({
      isSaving: false,
      request: request,
      hasError: true
    });
  },

  onChange: function(name, value) {
    const nextData = _.merge({}, this.state.data);
    nextData[name] = value;
    this.setState({
      data: nextData
    });
  },

  getValidators: function(data) {
    return {
      // firstName: [validators.isRequired]
    };
  },

  render: function() {
    const {
      title = `Update {{ _.capitalize(modelName) }}`,
      description = '',
      successMessage = `{{ _.capitalize(modelName) }} updated.`,
      schema,
      fieldMap,
      actionMap,
      fields,
      actions
    } = this.props;

    const {
      data,
      request,
      isSaving,
      showSuccessMessage,
      hasError
    } = this.state;

    const validators = this.getValidators(data);

    const requestProps = {
      request: request,
      reducer: '{{ modelName }}',
      onSuccess: this.onRequestSuccess,
      onError: this.onRequestError
    };

    return (
      <div className="modal-dialog">
        <div className="modal-content">
          <Overlay isVisible={isSaving}>
            <div>
              <div className="modal-header">
              <button type="button" className="close" onClick={this.onCancel}>
                <span>&times;</span>
              </button>
                {title ? (
                  <h4 className="modal-title">
                    {title}
                  </h4>
                ) : null}
                {description ? (
                  <p className="help-block">
                    {description}
                  </p>
                ) : null}
              </div>
              {(request && isSaving) ? (
                <Request {...requestProps} />
              ) : null}
              {showSuccessMessage ? (
                <SuccessMessage
                  title="Success!"
                  message={successMessage}
                />
              ) : null}
              {hasError ? (
                <RequestError request={request}>
                  {(request) => {
                    return request.error;
                  }}
                </RequestError>
              ) : null}
              <GenericForm
                data={data}
                validators={validators}
                onChange={this.onChange}
                callbacks={% raw %}{{
                  onSubmit: this.onSubmit,
                  onCancel: this.onCancel
                }}{% endraw %}
              >
                {(form) => {
                  return (
                    <div>
                      <div className="modal-body">
                        <div className="row">
                          <div className="col-md-6">
                            <div className="form-group">
                              <label>First Name</label>
                              <input
                                type="text"
                                className="form-control"
                                value={form.data.firstName}
                                placeholder="Enter some text..."
                                onChange={(event) => {
                                  form.onChange('firstName', event.target.value)
                                }}
                              />
                              <span className="help-block">
                                Enter your first name.
                              </span>
                            </div>
                          </div>
                          <div className="col-md-6">
                            <div className="form-group">
                              <label>Last Name</label>
                              <input
                                type="text"
                                className="form-control"
                                value={form.data.lastName}
                                placeholder="Enter some text..."
                                onChange={(event) => {
                                  form.onChange('lastName', event.target.value)
                                }}
                              />
                              <span className="help-block">
                                Enter your last name.
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="modal-footer">
                        <div className="row">
                          <div className="col-md-12">
                            <button
                              type="button"
                              className="btn btn-primary"
                              disabled={form.hasError}
                              onClick={() => {
                                form.callbacks.onSubmit(form.data);
                              }}
                            >
                              Update
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  )
                }}
              </GenericForm>
            </div>
          </Overlay>
        </div>
      </div>
    );
  }

});
