import React from 'react';
import createReactClass from 'create-react-class';
import PropTypes from 'prop-types';
import _ from 'lodash';
import { result as _result } from 'lore-utils';
import { GenericForm } from 'lore-react-forms';
import { RequestError } from 'lore-react-forms-bootstrap';
import Navigation from '../_common/Navigation';
import Steps from '../_common/Steps';
import validators from '../_utils/validators';

export default createReactClass({
  displayName: 'Step',

  propTypes: {
    data: PropTypes.object,
    request: PropTypes.object,
    callbacks: PropTypes.object
  },

  getInitialState: function() {
    const { data } = this.props;

    return {
      data: _.merge({}, data)
    };
  },

  onChange: function(name, value) {
    const nextData = _.merge({}, this.state.data);
    nextData[name] = value;
    this.setState({
      data: nextData
    });
  },

  getValidators: function(data) {
    return {};
  },

  render: function() {
    const {
      title = `Delete {{ _.capitalize(modelName) }}`,
      description = '',
      callbacks,
      hasError,
      request
    } = this.props;
    const { data } = this.state;
    const validators = this.getValidators(data);

    return (
      <div>
        <div className="modal-header">
          <button type="button" className="close" onClick={this.onCancel}>
            <span>&times;</span>
          </button>
          {title ? (
            <h4 className="modal-title">
              {title}
            </h4>
          ) : null}
          {description ? (
            <p className="help-block">
              {description}
            </p>
          ) : null}
        </div>
        {hasError ? (
          <RequestError request={request}>
            {(request) => {
              return request.error;
            }}
          </RequestError>
        ) : null}
        <Navigation activeStep={Steps.STEP_TWO} />
        <GenericForm
          data={data}
          validators={validators}
          onChange={this.onChange}
          callbacks={callbacks}
        >
          {(form) => {
            return (
              <div>
                <div className="modal-body">
                  <div className="row">
                    <div className="col-md-12">
                      <div>
                        <p>
                          Here is the data for the model you will be deleting:
                        </p>
                        <p>
                          {JSON.stringify(form.data, null, 2)}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <button
                    type="button"
                    className="btn btn-default"
                    onClick={() => {
                      form.callbacks.onPrevious(form.data);
                    }}
                  >
                    Back
                  </button>
                  <button
                    type="button"
                    className="btn btn-primary"
                    disabled={form.hasError}
                    onClick={() => {
                      form.callbacks.onSubmit(form.data);
                    }}
                  >
                    Delete
                  </button>
                </div>
              </div>
            )
          }}
        </GenericForm>
      </div>
    );
  }

});
